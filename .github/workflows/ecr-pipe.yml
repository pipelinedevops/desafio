
name: Deploy ECR image

on:
  push:
    #branches: [ "main" ]
    
env:
  AWS_ACCESS_KEY_ID: ${{ (github.ref == 'refs/heads/development' && secrets.AWS_ACCESS_KEY_DEV) || (github.ref == 'refs/heads/stg' && secrets.AWS_ACCESS_KEY_STG) || secrets.TF_AWS_LAB_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ (github.ref == 'refs/heads/development' && secrets.AWS_SECRET_ACCESS_KEY_DEV) || (github.ref == 'refs/heads/stg' && secrets.AWS_SECRET_ACCESS_KEY_STG) || secrets.TF_AWS_LAB_KEY }} 
  #AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_LAB_ID }}
  #AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_LAB_KEY }}
  AWS_REGION: ${{ (github.ref == 'refs/heads/development') && 'us-east-1' || (github.ref == 'refs/heads/stg') && 'us-east-1' || 'us-east-1' }} #us-east-1
  #02
  directory-02: parte1/02-repo
  #03                  
  directory-03-repo: ../03-image/ #../03-image/
  directory-03: parte1/03-image/
  repo_name: labchallenge
  image_name: app
  tag_name: v0.2

#  directory-03-repo: ../03-image/
# directory-03: 03-image
permissions:
  actions: read  # Ler informações sobre as ações
  contents: read
  #contents: write  # Modificar o conteúdo do repositório
  security-events: write  # Gravar eventos de segurança
  packages: write  # Modificar pacotes (GitHub Packages, por exemplo)
  deployments: write  # Gerenciar implantações
  checks: write  # Criar verificações
  issues: write  # Modificar problemas
  pull-requests: write  # Modificar solicitações de pull

jobs:
  configpipeline:
    name: 00-config pipeline
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
              
  deployrepo:
     name: 02-repo
     runs-on: ubuntu-latest
     needs: configpipeline
     env:
        ENVIRONMENT_TFVARS: ${{ (github.ref == 'refs/heads/development') && 'environments/dev.tfvars' || (github.ref == 'refs/heads/stg') && 'environments/stg.tfvars' || '../../environments/prd-02.tfvars' }} ##editar o caminho conforme necessário
        BACKEND_CONFIG: ${{ (github.ref == 'refs/heads/development') && 'environments/backend-dev.tf' || (github.ref == 'refs/heads/stg') && 'environments/backend-stg.tf' || '../../environments/blackend-prd-02.tfvars' }} #editar o caminho conforme necessário
        AWS_DEFAULT_REGION: ${{ (github.ref == 'refs/heads/development') && 'us-east-1' || (github.ref == 'refs/heads/stg') && 'us-east-1' || 'us-east-1' }}
     environment: production
     steps:
       - name: Checkout
         uses: actions/checkout@v4 
       
       - name: SetupTerraform
         uses: hashicorp/setup-terraform@v3  

       - name: deployrepo
         run: |      
          terraform init -reconfigure -backend-config="${{ env.BACKEND_CONFIG }}"
          terraform plan -lock=false -parallelism=10 -out=plan.out -var-file="${{ env.ENVIRONMENT_TFVARS }}"
          terraform apply -auto-approve -lock=false -parallelism=10  -var-file="${{ env.ENVIRONMENT_TFVARS }}"

         working-directory:  ${{ env.directory-02 }}  

  deployimage:
     name: 03-image
     runs-on: ubuntu-latest
     needs: deployrepo
     environment: production
     steps:
       - name: Checkout
         uses: actions/checkout@v4 
     
       - name: ecr login
         run: |
             export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
                     
             aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

         working-directory:  ${{ env.directory-03}}  
      
       - name: ecr build
         run: |
             export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)

             docker build -t ${{env.image_name}}:${{env.tag_name}}  ${{ env.directory-03-repo}}

             docker tag ${{env.image_name}}:${{env.tag_name}} ${{env.image_name}}
     
             docker tag ${{env.image_name}}:${{env.tag_name}} $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.repo_name }}:${{env.tag_name}}
     
             docker push $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.repo_name }}:${{env.tag_name}}

             docker pull $AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.repo_name }}:${{env.tag_name}}
     
             aws ecr describe-images --repository-name ${{ env.repo_name }}
                 
         shell: /usr/bin/bash -e {0}
         working-directory:  ${{ env.directory-03}} 